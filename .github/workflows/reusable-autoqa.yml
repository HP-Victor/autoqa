name: Reusable AutoQA Workflow

on:
  workflow_call:
    inputs:
      prompt:
        description: 'Custom prompt for the AutoQA agent (context + task)'
        required: true
        type: string
      max_turns:
        description: 'Maximum number of turns for the agent'
        required: false
        type: string
        default: '100'
      python_version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.10'
      model:
        description: 'Model to use for agent (gpt-5-pro / claude-3-5-sonnet-20241022)'
        required: false
        type: string
        default: 'gpt-5-pro'
      target_repo:
        description: 'Target repository to clone (format: owner/repo)'
        required: false
        type: string
        default: 'HP-Victor/template-models'
      framework_repos:
        description: 'Comma-separated framework repositories to clone (format: owner/repo,owner/repo)'
        required: false
        type: string
        default: 'HP-Victor/selenium-driver-lib,HP-Victor/selenium-commons-lib'
      additional_repos:
        description: 'Comma-separated additional repositories for context (format: owner/repo,owner/repo)'
        required: false
        type: string
        default: 'HP-Victor/central-repo'
    secrets:
      OPENAI_API_KEY:
        required: false
      ANTHROPIC_API_KEY:
        required: false
      GH_TOKEN:
        description: 'GitHub token with repo access for private repositories'
        required: true
  
permissions:
  contents: write
  pull-requests: write

jobs:
  run-autoqa:
    runs-on: ubuntu-latest
    env:
      OPENAI_MODEL: ${{ inputs.model }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout AutoQA repository
        uses: actions/checkout@v4
        with:
          repository: HPVICT4_mapfre/esp-calidad-qa-agentes
          ref: feature/version_estable
          path: autoqa

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.target_repo }}
          path: template-models
          token: ${{ env.GH_TOKEN }}

      - name: Checkout framework repositories
        run: |
          FRAMEWORK_PATHS=""
          IFS=',' read -ra REPOS <<< "${{ inputs.framework_repos }}"
          for repo in "${REPOS[@]}"; do
            repo_name=$(basename "$repo")
            echo "üì¶ Cloning framework: $repo as $repo_name"
            git clone https://${{ env.GH_TOKEN }}@github.com/$repo.git $repo_name
            
            # Agregar path al listado
            if [ -z "$FRAMEWORK_PATHS" ]; then
              FRAMEWORK_PATHS="../$repo_name"
            else
              FRAMEWORK_PATHS="$FRAMEWORK_PATHS,../$repo_name"
            fi
          done
          
          # Guardar paths en variable de entorno para el siguiente step
          echo "FRAMEWORK_LIB_PATHS=$FRAMEWORK_PATHS" >> $GITHUB_ENV
          echo "‚úÖ Framework paths configurados: $FRAMEWORK_PATHS"

      - name: Checkout additional repositories
        run: |
          ADDITIONAL_PATHS=""
          IFS=',' read -ra REPOS <<< "${{ inputs.additional_repos }}"
          for repo in "${REPOS[@]}"; do
            repo_name=$(basename "$repo")
            echo "üì¶ Cloning additional repo: $repo as $repo_name"
            git clone https://${{ env.GH_TOKEN }}@github.com/$repo.git $repo_name
            
            # Agregar path al listado
            if [ -z "$ADDITIONAL_PATHS" ]; then
              ADDITIONAL_PATHS="../$repo_name"
            else
              ADDITIONAL_PATHS="$ADDITIONAL_PATHS,../$repo_name"
            fi
          done
          
          # Guardar paths en variable de entorno para el siguiente step
          echo "ADDITIONAL_PROJECT_PATHS=$ADDITIONAL_PATHS" >> $GITHUB_ENV
          echo "‚úÖ Additional paths configurados: $ADDITIONAL_PATHS"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}
          cache: "pip"

      - name: Install dependencies
        working-directory: autoqa
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Control
        run: |
          echo "üóÇÔ∏è  Directorio de trabajo actual: $(pwd)"
          echo "üìÅ  Archivos en el directorio:"
          ls -la
          echo ""
          echo "üîç Variables de entorno configuradas:"
          echo "   FRAMEWORK_LIB_PATHS: $FRAMEWORK_LIB_PATHS"
          echo "   ADDITIONAL_PROJECT_PATHS: $ADDITIONAL_PROJECT_PATHS"
          echo "   TARGET_PROJECT_PATH: ../template-models"

      - name: Run AutoQA Agent
        working-directory: autoqa
        env:
          PROMPT: ${{ inputs.prompt }}
          MAX_TURNS: ${{ inputs.max_turns }}
          TARGET_PROJECT_PATH: '../template-models'
          FRAMEWORK_LIB_PATHS: ${{ env.FRAMEWORK_LIB_PATHS }}
          ADDITIONAL_PROJECT_PATHS: ${{ env.ADDITIONAL_PROJECT_PATHS }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          echo "üöÄ Iniciando AutoQA Agent con:"
          echo "   FRAMEWORK_LIB_PATHS: $FRAMEWORK_LIB_PATHS"
          echo "   ADDITIONAL_PROJECT_PATHS: $ADDITIONAL_PROJECT_PATHS"
          echo "   TARGET_PROJECT_PATH: $TARGET_PROJECT_PATH"
          python workflow-entry-point.py

      - name: Upload modified target repository
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autoqa-modified-repository
          path: template-models/
          retention-days: 7

